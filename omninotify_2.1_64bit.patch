diff -Naur omniNotify.orig//DEBUG.mk omniNotify/DEBUG.mk
--- omniNotify.orig//DEBUG.mk	2004-04-20 23:04:08.000000000 +0200
+++ omniNotify/DEBUG.mk	2005-06-23 20:04:50.000000000 +0200
@@ -4,6 +4,7 @@
 # There are three things you may wish to change:
 
 # (1) Uncomment the following to enable use of the debug log.
+# WARNING: Currently broken for 64-bit mode. Use with extreme caution.
 #EnableDebugLog = 1
 
 # (2) Uncomment the following to disable object garbage collection
diff -Naur omniNotify.orig//idl/AttNotification.idl omniNotify/idl/AttNotification.idl
--- omniNotify.orig//idl/AttNotification.idl	2003-10-12 20:51:16.000000000 +0200
+++ omniNotify/idl/AttNotification.idl	2006-11-23 16:46:22.000000000 +0100
@@ -132,8 +132,15 @@
 
     IactSeq children(in boolean only_cleanup_candidates);
     boolean safe_cleanup();
+
+  };
+
+  interface ProxyInteractive : Interactive
+  {
+    readonly attribute Object remote_object;
   };
 
+
   // Entities
 
   // ------------------------------ Proxies ------------------------------
@@ -159,55 +166,55 @@
   // CosNotification Any proxies 
 
   interface ProxyPushSupplier
-    : Interactive, CosNotifyChannelAdmin::ProxyPushSupplier {
+    : ProxyInteractive, CosNotifyChannelAdmin::ProxyPushSupplier {
   };
 
   interface ProxyPullSupplier
-    : Interactive, CosNotifyChannelAdmin::ProxyPullSupplier {
+    : ProxyInteractive, CosNotifyChannelAdmin::ProxyPullSupplier {
   };
 
   interface ProxyPushConsumer
-    : Interactive, CosNotifyChannelAdmin::ProxyPushConsumer {
+    : ProxyInteractive, CosNotifyChannelAdmin::ProxyPushConsumer {
   };
 
   interface ProxyPullConsumer
-    : Interactive, CosNotifyChannelAdmin::ProxyPullConsumer {
+    : ProxyInteractive, CosNotifyChannelAdmin::ProxyPullConsumer {
   };
 
   // CosNotification StructuredEvent proxies
 
   interface StructuredProxyPushSupplier
-    : Interactive, CosNotifyChannelAdmin::StructuredProxyPushSupplier {
+    : ProxyInteractive, CosNotifyChannelAdmin::StructuredProxyPushSupplier {
   };
 
   interface StructuredProxyPullSupplier
-    : Interactive, CosNotifyChannelAdmin::StructuredProxyPullSupplier {
+    : ProxyInteractive, CosNotifyChannelAdmin::StructuredProxyPullSupplier {
   };
 
   interface StructuredProxyPushConsumer
-    : Interactive, CosNotifyChannelAdmin::StructuredProxyPushConsumer {
+    : ProxyInteractive, CosNotifyChannelAdmin::StructuredProxyPushConsumer {
   };
 
   interface StructuredProxyPullConsumer
-    : Interactive, CosNotifyChannelAdmin::StructuredProxyPullConsumer {
+    : ProxyInteractive, CosNotifyChannelAdmin::StructuredProxyPullConsumer {
   };
 
   // CosNotification EventBatch proxies
 
   interface SequenceProxyPushSupplier
-    : Interactive, CosNotifyChannelAdmin::SequenceProxyPushSupplier {
+    : ProxyInteractive, CosNotifyChannelAdmin::SequenceProxyPushSupplier {
   };
 
   interface SequenceProxyPullSupplier
-    : Interactive, CosNotifyChannelAdmin::SequenceProxyPullSupplier {
+    : ProxyInteractive, CosNotifyChannelAdmin::SequenceProxyPullSupplier {
   };
 
   interface SequenceProxyPushConsumer
-    : Interactive, CosNotifyChannelAdmin::SequenceProxyPushConsumer {
+    : ProxyInteractive, CosNotifyChannelAdmin::SequenceProxyPushConsumer {
   };
 
   interface SequenceProxyPullConsumer
-    : Interactive, CosNotifyChannelAdmin::SequenceProxyPullConsumer {
+    : ProxyInteractive, CosNotifyChannelAdmin::SequenceProxyPullConsumer {
   };
 
   // ------------------------------ Admins ------------------------------
diff -Naur omniNotify.orig//include/CosEventChannelAdmin_i.h omniNotify/include/CosEventChannelAdmin_i.h
--- omniNotify.orig//include/CosEventChannelAdmin_i.h	2003-10-23 06:39:11.000000000 +0200
+++ omniNotify/include/CosEventChannelAdmin_i.h	2006-11-23 16:46:22.000000000 +0100
@@ -62,6 +62,7 @@
   AttN::NameSeq* my_name( WRAPPED_DECLARG_VOID );
   AttN::IactSeq* children(CORBA::Boolean only_cleanup_candidates);
   CORBA::Boolean safe_cleanup();
+  CORBA::Object *remote_object();
 
   // Methods from CosEvC::PushConsumer Interface
   void push(const CORBA::Any& data  WRAPPED_DECLARG );
@@ -122,6 +123,7 @@
   AttN::NameSeq* my_name( WRAPPED_DECLARG_VOID );
   AttN::IactSeq* children(CORBA::Boolean only_cleanup_candidates);
   CORBA::Boolean safe_cleanup();
+  CORBA::Object *remote_object(); 
 
   // Methods from CosEvC::PullConsumer Interface
   void disconnect_pull_consumer( WRAPPED_DECLARG_VOID );
@@ -191,6 +193,7 @@
   AttN::NameSeq* my_name( WRAPPED_DECLARG_VOID );
   AttN::IactSeq* children(CORBA::Boolean only_cleanup_candidates);
   CORBA::Boolean safe_cleanup();
+  CORBA::Object *remote_object(); 
 
   // Methods from CosEvCA::ProxyPushSupplier Interface
   void connect_push_consumer(CosEvC::PushConsumer_ptr consumer
@@ -260,6 +263,7 @@
   AttN::NameSeq* my_name( WRAPPED_DECLARG_VOID );
   AttN::IactSeq* children(CORBA::Boolean only_cleanup_candidates);
   CORBA::Boolean safe_cleanup();
+  CORBA::Object *remote_object(); 
 
   // Methods from CosEvCA::ProxyPullSupplier
   void  connect_pull_consumer(CosEvC::PullConsumer_ptr consumer
diff -Naur omniNotify.orig//include/CosNotifyChannelAdmin_i.h omniNotify/include/CosNotifyChannelAdmin_i.h
--- omniNotify.orig//include/CosNotifyChannelAdmin_i.h	2003-10-23 06:39:11.000000000 +0200
+++ omniNotify/include/CosNotifyChannelAdmin_i.h	2006-11-23 16:46:22.000000000 +0100
@@ -317,6 +317,8 @@
   void connect_any_pull_consumer(CosEvC::PullConsumer_ptr cons
 			         WRAPPED_DECLARG );
 
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID ); 
+
   // Methods from CosEvC::PullSupplier Interface
   CORBA::Any* pull( WRAPPED_DECLARG_VOID );
   CORBA::Any* try_pull(CORBA::Boolean& has_event WRAPPED_DECLARG );
@@ -363,6 +365,8 @@
   void connect_structured_pull_consumer( 
 		CosNC::StructuredPullConsumer_ptr consumer WRAPPED_DECLARG );
 
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   // Methods from CosNC::StructuredPullSupplier Interface
   CosN::StructuredEvent* pull_structured_event( WRAPPED_DECLARG_VOID );
   CosN::StructuredEvent* try_pull_structured_event(CORBA::Boolean& has_event
@@ -410,6 +414,8 @@
   void connect_sequence_pull_consumer(
 		CosNC::SequencePullConsumer_ptr consumer WRAPPED_DECLARG );
 
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   // Methods from CosNC::SequencePullSupplier Interface
   CosN::EventBatch* pull_structured_events(CORBA::Long max_number 
 					  WRAPPED_DECLARG );
@@ -466,6 +472,9 @@
   // Methods from CosNA::ProxyPushSupplier Interface
   void connect_any_push_consumer(
 		CosEvC::PushConsumer_ptr consumer WRAPPED_DECLARG );
+
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   void suspend_connection( WRAPPED_DECLARG_VOID );
   void resume_connection( WRAPPED_DECLARG_VOID );
 
@@ -518,6 +527,9 @@
   // Methods from CosNA::StructuredProxyPushSupplier Interface
   void connect_structured_push_consumer(
 		CosNC::StructuredPushConsumer_ptr consumer WRAPPED_DECLARG );
+
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   void suspend_connection( WRAPPED_DECLARG_VOID );
   void resume_connection( WRAPPED_DECLARG_VOID );
 
@@ -569,6 +581,9 @@
   // Methods from CosNA::SequenceProxyPushSupplier Interface
   void connect_sequence_push_consumer(
 		CosNC::SequencePushConsumer_ptr consumer WRAPPED_DECLARG );
+
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   void suspend_connection( WRAPPED_DECLARG_VOID );
   void resume_connection( WRAPPED_DECLARG_VOID );
 
@@ -849,6 +864,8 @@
   void connect_any_push_supplier(CosEvC::PushSupplier_ptr supplier
 				 WRAPPED_DECLARG);
 
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   // Methods from CosEvC::PushConsumer Interface
   void push(const CORBA::Any& data WRAPPED_DECLARG );
   void disconnect_push_consumer( WRAPPED_DECLARG_VOID );
@@ -888,6 +905,8 @@
   // Methods from CosNA::StructuredProxyPushConsumer Interface
   void connect_structured_push_supplier(
 		CosNC::StructuredPushSupplier_ptr supplier WRAPPED_DECLARG );
+ 
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
 
   // Methods from CosNC::StructuredPushConsumer Interface
   void push_structured_event(const CosN::StructuredEvent& event WRAPPED_DECLARG);
@@ -931,6 +950,8 @@
   void connect_sequence_push_supplier(CosNC::SequencePushSupplier_ptr supplier
 				      WRAPPED_DECLARG );
 
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   // Methods from CosNC::SequencePushConsumer Interface
   void push_structured_events(const CosN::EventBatch& events WRAPPED_DECLARG );
   void disconnect_sequence_push_consumer( WRAPPED_DECLARG_VOID );
@@ -976,6 +997,9 @@
   // Methods from CosNA::ProxyPullConsumer Interface
   void connect_any_pull_supplier(
 		CosEvC::PullSupplier_ptr supplier WRAPPED_DECLARG );
+
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   void suspend_connection( WRAPPED_DECLARG_VOID );
   void resume_connection( WRAPPED_DECLARG_VOID ); 
 
@@ -1032,6 +1056,9 @@
   // Methods from CosNA::StructuredProxyPullConsumer Interface
   void connect_structured_pull_supplier(
 		CosNC::StructuredPullSupplier_ptr supplier WRAPPED_DECLARG );
+
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   void suspend_connection( WRAPPED_DECLARG_VOID );
   void resume_connection( WRAPPED_DECLARG_VOID );
 
@@ -1087,6 +1114,9 @@
   // Methods from CosNA::SequenceProxyPullConsumer Interface
   void connect_sequence_pull_supplier(
 		CosNC::SequencePullSupplier_ptr supplier WRAPPED_DECLARG );
+
+  CORBA::Object *remote_object( WRAPPED_DECLARG_VOID );
+
   void suspend_connection( WRAPPED_DECLARG_VOID );
   void resume_connection( WRAPPED_DECLARG_VOID );
 
diff -Naur omniNotify.orig//include/CosNotifyFilter_i.h omniNotify/include/CosNotifyFilter_i.h
--- omniNotify.orig//include/CosNotifyFilter_i.h	2003-10-23 06:39:11.000000000 +0200
+++ omniNotify/include/CosNotifyFilter_i.h	2006-10-01 14:11:24.000000000 +0200
@@ -200,7 +200,7 @@
 
   CORBA::Boolean  has_callbacks() 	{ return _callbacks.length()   ? 1:0; }
   CORBA::Boolean  has_callbacks_i()	{ return _callbacks_i.length() ? 1:0; }
-  unsigned long   getID() const		{ return _fid; }
+  CosNF::FilterID getID() const		{ return _fid; }
 
   RDIstrstream& log_output(RDIstrstream& str) const;
 
@@ -242,7 +242,7 @@
 #endif
   AttN::NameSeq              _my_name;
   FilterFactory_i*           _factory;
-  unsigned long              _fid;
+  CosNF::FilterID            _fid;
   long                       _idcounter;
   unsigned long              _hashvalue;
   RDI_TimeT                  _last_detach;
@@ -452,6 +452,7 @@
 typedef struct FAdminFilterEntry_s {
   CosNF::CallbackID    callback_id;
   Filter_i*            filter;
+  CosNF::Filter_var    remote_filter;
 } FAdminFilterEntry;
 
 class FAdminHelper {
diff -Naur omniNotify.orig//include/omniorb_poa_wrappers_impl.h omniNotify/include/omniorb_poa_wrappers_impl.h
--- omniNotify.orig//include/omniorb_poa_wrappers_impl.h	2003-10-12 20:51:15.000000000 +0200
+++ omniNotify/include/omniorb_poa_wrappers_impl.h	2005-06-23 20:04:51.000000000 +0200
@@ -51,7 +51,7 @@
   _orb = CORBA::ORB_init(argc, argv, ORB_INIT_NAME);
 #elif defined(__OMNIORB4__)
   char maxgiopcon[100];
-  sprintf(maxgiopcon, "%lu", _max_giop_connections);
+  sprintf(maxgiopcon, "%lu", (unsigned long)_max_giop_connections);
   const char* onepercon = _one_call_per_connection ? "1" : "0";
   const char* options[][2] = { { "maxGIOPConnectionPerServer", (const char*)maxgiopcon }, 
 			       { "oneCallPerConnection", onepercon }, 
diff -Naur omniNotify.orig//include/RDIHashFuncs.h omniNotify/include/RDIHashFuncs.h
--- omniNotify.orig//include/RDIHashFuncs.h	2004-04-20 23:39:28.000000000 +0200
+++ omniNotify/include/RDIHashFuncs.h	2005-06-23 20:04:51.000000000 +0200
@@ -33,6 +33,7 @@
 #define __RDI_HASH_FUNCS_H__
 
 #include "RDIStringDefs.h"
+#include "corba_wrappers.h"
 
 // HASH AND RANK FUNCTIONS
 //   * Hash and Rank function definitions, together with several
@@ -105,5 +106,19 @@
   return h;
 }
 
+inline unsigned int RDI_CorbaSLongHash(const void* K)
+{ CORBA::Long l = *((CORBA::Long *) K); return (l < 0) ? -l : l; }
+
+inline unsigned int RDI_CorbaULongHash(const void* K)
+{ return *((CORBA::ULong *) K); }
+
+inline int RDI_CorbaSLongRank(const void* L, const void* R)
+{ return *((CORBA::Long *) L) - *((CORBA::Long *) R); }
+
+inline int RDI_CorbaULongRank(const void* L, const void* R)
+{ CORBA::ULong l = *((CORBA::ULong *) L), r = *((CORBA::ULong *) R);
+  return (l < r) ? -1 : ((l > r) ? 1 : 0); 
+}
+
 #endif /*  __RDI_HASH_FUNCS_H__  */
 
diff -Naur omniNotify.orig//include/RDIstrstream.h omniNotify/include/RDIstrstream.h
--- omniNotify.orig//include/RDIstrstream.h	2003-10-12 20:51:15.000000000 +0200
+++ omniNotify/include/RDIstrstream.h	2005-06-23 20:04:51.000000000 +0200
@@ -62,9 +62,11 @@
   RDIstrstream& operator<<(short n) {return operator<<((int)n);}
   RDIstrstream& operator<<(unsigned short n) {return operator<<((unsigned int)n);}
 #ifdef HAS_LongLong
+#if SIZEOF_LONG_LONG != SIZEOF_LONG
   RDIstrstream& operator<<(WRAPPED_CORBA_LONGLONG_TYPE n);
   RDIstrstream& operator<<(WRAPPED_CORBA_ULONGLONG_TYPE n);
 #endif
+#endif
 #ifdef HAS_Cplusplus_Bool
   RDIstrstream& operator<<(bool b) { return operator<<((int)b); }
 #endif
diff -Naur omniNotify.orig//include/RDITimeWrappers.h omniNotify/include/RDITimeWrappers.h
--- omniNotify.orig//include/RDITimeWrappers.h	2003-10-23 15:28:18.000000000 +0200
+++ omniNotify/include/RDITimeWrappers.h	2005-06-23 20:04:51.000000000 +0200
@@ -235,7 +235,7 @@
 
   // pretty-printing of absolute local time -- no newline
   void out_local(RDIstrstream& str) {
-    CORBA::ULong ts, tn;
+    unsigned long ts, tn;
     get_posixbase_secs_nanosecs(ts, tn);
     RDI_posixbase_out_time(str, ts, tn);
     str << " (local time)";
@@ -395,7 +395,7 @@
   }
   // pretty-printing of absolute univ time -- no newline
   void out_gmt(RDIstrstream& str) {
-    CORBA::ULong ts, tn;
+    unsigned long ts, tn;
     get_gmt_posixbase_secs_nanosecs(ts, tn);
     RDI_posixbase_out_time(str, ts, tn);
     str << " (greenwich mean time)";
diff -Naur omniNotify.orig//lib/ChannelAdmin_i.cc omniNotify/lib/ChannelAdmin_i.cc
--- omniNotify.orig//lib/ChannelAdmin_i.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/ChannelAdmin_i.cc	2005-06-23 20:04:52.000000000 +0200
@@ -54,12 +54,12 @@
   _fa_helper("cadmin_fa_helper"), _channel(channel), _qosprop(0),
   _serial(serial), _and_or_oper(op), _rqstypes(), _prx_serial(1),
   _num_proxies(0), _cosevent_push(), _cosevent_pull(),
-  _prx_any_push(RDI_ULongHash, RDI_ULongRank),
-  _prx_any_pull(RDI_ULongHash, RDI_ULongRank),
-  _prx_struc_push(RDI_ULongHash, RDI_ULongRank),
-  _prx_struc_pull(RDI_ULongHash, RDI_ULongRank),
-  _prx_batch_push(RDI_ULongHash, RDI_ULongRank),
-  _prx_batch_pull(RDI_ULongHash, RDI_ULongRank)
+  _prx_any_push(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_any_pull(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_struc_push(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_struc_pull(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_batch_push(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_batch_pull(RDI_CorbaULongHash, RDI_CorbaULongRank)
 {
   RDI_OPLOCK_INIT("cadmin");
   _qosprop = new RDI_NotifQoS(_channel->qos_properties());
@@ -71,7 +71,7 @@
   _last_use.set_curtime();
 #endif
   char buf[20];
-  sprintf(buf, "cadmin%ld", serial);
+  sprintf(buf, "cadmin%ld", (long)serial);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
   WRAPPED_REGISTER_IMPL2(this, &_my_name);
@@ -1692,12 +1692,12 @@
   _num_proxies(0), 
   _evtypes(RDI_EventType::hash, RDI_EventType::rank),
   _cosevent_push(), _cosevent_pull(),
-  _prx_any_push(RDI_ULongHash, RDI_ULongRank),
-  _prx_any_pull(RDI_ULongHash, RDI_ULongRank),
-  _prx_struc_push(RDI_ULongHash, RDI_ULongRank),
-  _prx_struc_pull(RDI_ULongHash, RDI_ULongRank),
-  _prx_batch_push(RDI_ULongHash, RDI_ULongRank),
-  _prx_batch_pull(RDI_ULongHash, RDI_ULongRank)
+  _prx_any_push(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_any_pull(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_struc_push(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_struc_pull(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_batch_push(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _prx_batch_pull(RDI_CorbaULongHash, RDI_CorbaULongRank)
 {
   RDI_OPLOCK_INIT("sadmin");
   _qosprop = new RDI_NotifQoS(_channel->qos_properties());
@@ -1706,7 +1706,7 @@
   _last_use.set_curtime();
 #endif
   char buf[20];
-  sprintf(buf, "sadmin%ld", serial);
+  sprintf(buf, "sadmin%ld", (long)serial);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
   WRAPPED_REGISTER_IMPL2(this, &_my_name);
@@ -3084,27 +3084,27 @@
   RDI_HashCursor<CosNA::ProxyID, StructuredProxyPullSupplier_i *> sc2;
   RDI_HashCursor<CosNA::ProxyID, SequenceProxyPullSupplier_i * >  bc2;
   for ( ac1 = _prx_any_push.cursor(); ac1.is_valid(); ++ac1, ++num ) {
-    sprintf(buf, "proxy%ld", ac1.key());
+    sprintf(buf, "proxy%ld", (long)ac1.key());
     (*names)[num] = (const char*)buf;
   }
   for ( sc1 = _prx_struc_push.cursor(); sc1.is_valid(); ++sc1, ++num ) {
-    sprintf(buf, "proxy%ld", sc1.key());
+    sprintf(buf, "proxy%ld", (long)sc1.key());
     (*names)[num] = (const char*)buf;
   }
   for ( bc1 = _prx_batch_push.cursor(); bc1.is_valid(); ++bc1, ++num ) {
-    sprintf(buf, "proxy%ld", bc1.key());
+    sprintf(buf, "proxy%ld", (long)bc1.key());
     (*names)[num] = (const char*)buf;
   }
   for ( ac2 = _prx_any_pull.cursor(); ac2.is_valid(); ++ac2, ++num ) {
-    sprintf(buf, "proxy%ld", ac2.key());
+    sprintf(buf, "proxy%ld", (long)ac2.key());
     (*names)[num] = (const char*)buf;
   }
   for ( sc2 = _prx_struc_pull.cursor(); sc2.is_valid(); ++sc2, ++num ) {
-    sprintf(buf, "proxy%ld", sc2.key());
+    sprintf(buf, "proxy%ld", (long)sc2.key());
     (*names)[num] = (const char*)buf;
   }
   for ( bc2 = _prx_batch_pull.cursor(); bc2.is_valid(); ++bc2, ++num ) {
-    sprintf(buf, "proxy%ld", bc2.key());
+    sprintf(buf, "proxy%ld", (long)bc2.key());
     (*names)[num] = (const char*)buf;
   }
   return names;
@@ -3326,7 +3326,7 @@
     RDI_HashCursor<CosNA::ProxyID, SequenceProxyPullSupplier_i * >  bc2;
     if (targ1_set == 0) {
       for ( ac1 = _prx_any_push.cursor(); ac1.is_valid(); ++ac1 ) {
-	sprintf(buf, "proxy%ld", ac1.key());
+	sprintf(buf, "proxy%ld", (long)ac1.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::ProxyPushSupplier, ac1.val());
 	  targ1_set = 1;
@@ -3336,7 +3336,7 @@
     }
     if (targ1_set == 0) {
       for ( sc1 = _prx_struc_push.cursor(); sc1.is_valid(); ++sc1 ) {
-	sprintf(buf, "proxy%ld", sc1.key());
+	sprintf(buf, "proxy%ld", (long)sc1.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::StructuredProxyPushSupplier, sc1.val());
 	  targ1_set = 1;
@@ -3346,7 +3346,7 @@
     }
     if (targ1_set == 0) {
       for ( bc1 = _prx_batch_push.cursor(); bc1.is_valid(); ++bc1 ) {
-	sprintf(buf, "proxy%ld", bc1.key());
+	sprintf(buf, "proxy%ld", (long)bc1.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::SequenceProxyPushSupplier, bc1.val());
 	  targ1_set = 1;
@@ -3356,7 +3356,7 @@
     }
     if (targ1_set == 0) {
       for ( ac2 = _prx_any_pull.cursor(); ac2.is_valid(); ++ac2 ) {
-	sprintf(buf, "proxy%ld", ac2.key());
+	sprintf(buf, "proxy%ld", (long)ac2.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::ProxyPullSupplier, ac2.val());
 	  targ1_set = 1;
@@ -3366,7 +3366,7 @@
     }
     if (targ1_set == 0) {
       for ( sc2 = _prx_struc_pull.cursor(); sc2.is_valid(); ++sc2 ) {
-	sprintf(buf, "proxy%ld", sc2.key());
+	sprintf(buf, "proxy%ld", (long)sc2.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::StructuredProxyPullSupplier, sc2.val());
 	  targ1_set = 1;
@@ -3376,7 +3376,7 @@
     }
     if (targ1_set == 0) {
       for ( bc2 = _prx_batch_pull.cursor(); bc2.is_valid(); ++bc2 ) {
-	sprintf(buf, "proxy%ld", bc2.key());
+	sprintf(buf, "proxy%ld", (long)bc2.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::SequenceProxyPullSupplier, bc2.val());
 	  targ1_set = 1;
@@ -3543,27 +3543,27 @@
   RDI_HashCursor<CosNA::ProxyID, StructuredProxyPullConsumer_i *> sc2;
   RDI_HashCursor<CosNA::ProxyID, SequenceProxyPullConsumer_i *>   bc2;
   for ( ac1 = _prx_any_push.cursor(); ac1.is_valid(); ++ac1, ++num ) {
-    sprintf(buf, "proxy%ld", ac1.key());
+    sprintf(buf, "proxy%ld", (long)ac1.key());
     (*names)[num] = (const char*)buf;
   }
   for ( sc1 = _prx_struc_push.cursor(); sc1.is_valid(); ++sc1, ++num ) {
-    sprintf(buf, "proxy%ld", sc1.key());
+    sprintf(buf, "proxy%ld", (long)sc1.key());
     (*names)[num] = (const char*)buf;
   }
   for ( bc1 = _prx_batch_push.cursor(); bc1.is_valid(); ++bc1, ++num ) {
-    sprintf(buf, "proxy%ld", bc1.key());
+    sprintf(buf, "proxy%ld", (long)bc1.key());
     (*names)[num] = (const char*)buf;
   }
   for ( ac2 = _prx_any_pull.cursor(); ac2.is_valid(); ++ac2, ++num ) {
-    sprintf(buf, "proxy%ld", ac2.key());
+    sprintf(buf, "proxy%ld", (long)ac2.key());
     (*names)[num] = (const char*)buf;
   }
   for ( sc2 = _prx_struc_pull.cursor(); sc2.is_valid(); ++sc2, ++num ) {
-    sprintf(buf, "proxy%ld", sc2.key());
+    sprintf(buf, "proxy%ld", (long)sc2.key());
     (*names)[num] = (const char*)buf;
   }
   for ( bc2 = _prx_batch_pull.cursor(); bc2.is_valid(); ++bc2, ++num ) {
-    sprintf(buf, "proxy%ld", bc2.key());
+    sprintf(buf, "proxy%ld", (long)bc2.key());
     (*names)[num] = (const char*)buf;
   }
   return names;
@@ -3784,7 +3784,7 @@
     RDI_HashCursor<CosNA::ProxyID, SequenceProxyPullConsumer_i *>   bc2;
     if (targ1_set == 0) {
       for ( ac1 = _prx_any_push.cursor(); ac1.is_valid(); ++ac1 ) {
-	sprintf(buf, "proxy%ld", ac1.key());
+	sprintf(buf, "proxy%ld", (long)ac1.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::ProxyPushConsumer, ac1.val());
 	  targ1_set = 1;
@@ -3794,7 +3794,7 @@
     }
     if (targ1_set == 0) {
       for ( sc1 = _prx_struc_push.cursor(); sc1.is_valid(); ++sc1 ) {
-	sprintf(buf, "proxy%ld", sc1.key());
+	sprintf(buf, "proxy%ld", (long)sc1.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::StructuredProxyPushConsumer, sc1.val());
 	  targ1_set = 1;
@@ -3804,7 +3804,7 @@
     }
     if (targ1_set == 0) {
       for ( bc1 = _prx_batch_push.cursor(); bc1.is_valid(); ++bc1 ) {
-	sprintf(buf, "proxy%ld", bc1.key());
+	sprintf(buf, "proxy%ld", (long)bc1.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::SequenceProxyPushConsumer, bc1.val());
 	  targ1_set = 1;
@@ -3814,7 +3814,7 @@
     }
     if (targ1_set == 0) {
       for ( ac2 = _prx_any_pull.cursor(); ac2.is_valid(); ++ac2 ) {
-	sprintf(buf, "proxy%ld", ac2.key());
+	sprintf(buf, "proxy%ld", (long)ac2.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::ProxyPullConsumer, ac2.val());
 	  targ1_set = 1;
@@ -3824,7 +3824,7 @@
     }
     if (targ1_set == 0) {
       for ( sc2 = _prx_struc_pull.cursor(); sc2.is_valid(); ++sc2 ) {
-	sprintf(buf, "proxy%ld", sc2.key());
+	sprintf(buf, "proxy%ld", (long)sc2.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::StructuredProxyPullConsumer, sc2.val());
 	  targ1_set = 1;
@@ -3834,7 +3834,7 @@
     }
     if (targ1_set == 0) {
       for ( bc2 = _prx_batch_pull.cursor(); bc2.is_valid(); ++bc2 ) {
-	sprintf(buf, "proxy%ld", bc2.key());
+	sprintf(buf, "proxy%ld", (long)bc2.key());
 	if (RDI_STR_EQ_I(go_targ, buf)) {
 	  targ1 = WRAPPED_IMPL2OREF(AttN::SequenceProxyPullConsumer, bc2.val());
 	  targ1_set = 1;
diff -Naur omniNotify.orig//lib/CosEventProxy.cc omniNotify/lib/CosEventProxy.cc
--- omniNotify.orig//lib/CosEventProxy.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/CosEventProxy.cc	2006-11-23 16:46:22.000000000 +0100
@@ -51,7 +51,7 @@
 {
   RDI_OPLOCK_INIT("EventProxyPushConsumer");
   char buf[20];
-  sprintf(buf, "proxy%ld", prxid);
+  sprintf(buf, "proxy%ld", (long)prxid);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
   _supplier = CosEvC::PushSupplier::_nil();
@@ -229,7 +229,7 @@
 {
   RDI_OPLOCK_INIT("EventProxyPullConsumer");
   char buf[20];
-  sprintf(buf, "proxy%ld", prxid);
+  sprintf(buf, "proxy%ld", (long)prxid);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
   _supplier = CosEvC::PullSupplier::_nil();
@@ -645,7 +645,7 @@
 {
   RDI_OPLOCK_INIT("EventProxyPushSupplier");
   char buf[20];
-  sprintf(buf, "proxy%ld", prxid);
+  sprintf(buf, "proxy%ld", (long)prxid);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
   _consumer = CosEvC::PushConsumer::_nil();
@@ -1030,7 +1030,7 @@
 {
   RDI_OPLOCK_INIT("EventProxyPullSupplier");
   char buf[20];
-  sprintf(buf, "proxy%ld", prxid);
+  sprintf(buf, "proxy%ld", (long)prxid);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
   _consumer = CosEvC::PullConsumer::_nil();
@@ -1328,6 +1328,11 @@
   return 1;
 }
 
+CORBA::Object* EventProxyPushConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
 #undef WHATFN
 #define WHATFN "EventProxyPushConsumer_i::my_name"
 AttN::NameSeq*
@@ -1432,6 +1437,11 @@
   return 1;
 }
 
+CORBA::Object* EventProxyPullConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
 #undef WHATFN
 #define WHATFN "EventProxyPullConsumer_i::my_name"
 AttN::NameSeq*
@@ -1537,6 +1547,11 @@
   return 1;
 }
 
+CORBA::Object* EventProxyPushSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
 #undef WHATFN
 #define WHATFN "EventProxyPushSupplier_i::my_name"
 AttN::NameSeq*
@@ -1642,6 +1657,11 @@
   return 1;
 }
 
+CORBA::Object* EventProxyPullSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
 #undef WHATFN
 #define WHATFN "EventProxyPullSupplier_i::my_name"
 AttN::NameSeq*
diff -Naur omniNotify.orig//lib/EventChannel_i.cc omniNotify/lib/EventChannel_i.cc
--- omniNotify.orig//lib/EventChannel_i.cc	2003-10-23 15:41:39.000000000 +0200
+++ omniNotify/lib/EventChannel_i.cc	2005-06-23 20:04:53.000000000 +0200
@@ -65,8 +65,8 @@
   _reporter(0),   _rep_wait(), _rep_exit(0), _repisactive(0), _repInterval(0),
   _events(0), _qos_lock(), _stats_lock(), _performance_timer(), 
   _proxy_events(8192,1024), _admin_group(0),
-  _supl_admin(RDI_ULongHash, RDI_ULongRank), 
-  _cons_admin(RDI_ULongHash, RDI_ULongRank),
+  _supl_admin(RDI_CorbaULongHash, RDI_CorbaULongRank), 
+  _cons_admin(RDI_CorbaULongHash, RDI_CorbaULongRank),
   _evtypes(RDI_EventType::hash, RDI_EventType::rank),
   _pull_supplier(0), _push_consumer(0),
   _ochange_pool(0), _schange_pool(0)
@@ -75,7 +75,7 @@
   _rep_wait = _oplockptr->add_condition();
   _rep_exit = _oplockptr->add_condition();
   char buf[20];
-  sprintf(buf, "chan%ld", myserial);
+  sprintf(buf, "chan%ld", (long)myserial);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
 
@@ -1580,7 +1580,8 @@
 					     const RDI_AdminQoS& defadm,
 					     RDI_ServerQoS*      s_qos) :
   _oplockptr(0), _ffactory(ffactory), _serial(0), _defqos(defqos), 
-  _defadm(defadm), _server_qos(s_qos), _channel(RDI_ULongHash, RDI_ULongRank)
+  _defadm(defadm), _server_qos(s_qos),
+  _channel(RDI_CorbaULongHash, RDI_CorbaULongRank)
 {
   RDI_OPLOCK_INIT("chanfact");
   _my_name.length(2);
@@ -2127,12 +2128,12 @@
   RDI_HashCursor<CosNA::AdminID, ConsumerAdmin_i *> c;
   unsigned int idx = 0;
   for (c = _cons_admin.cursor(); c.is_valid(); ++c) {
-    sprintf(buf, "cadmin%ld", c.key());
+    sprintf(buf, "cadmin%ld", (long)c.key());
     (*names)[idx++] = (const char*)buf;
   }
   RDI_HashCursor<CosNA::AdminID, SupplierAdmin_i *> s;
   for (s = _supl_admin.cursor(); s.is_valid(); ++s) {
-    sprintf(buf, "sadmin%ld", s.key());
+    sprintf(buf, "sadmin%ld", (long)s.key());
     (*names)[idx++] = (const char*)buf;
   }
   return names;
@@ -2527,7 +2528,7 @@
   unsigned int index = 0;
   RDI_HashCursor<CosNA::ChannelID, EventChannel_i*> cursor;
   for ( cursor = _channel.cursor(); cursor.is_valid(); index++, ++cursor ) {
-    sprintf(buf, "chan%ld", cursor.key());
+    sprintf(buf, "chan%ld", (long)cursor.key());
     (*names)[index] = (const char*)buf;
   }
   return names;
diff -Naur omniNotify.orig//lib/FilterAdmin_i.cc omniNotify/lib/FilterAdmin_i.cc
--- omniNotify.orig//lib/FilterAdmin_i.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/FilterAdmin_i.cc	2006-09-26 00:12:08.000000000 +0200
@@ -308,7 +308,7 @@
 
 FAdminHelper::FAdminHelper(const char *resty) :
   _resty(resty), _serial(1),
-  _filters(RDI_ULongHash, RDI_ULongRank)
+  _filters(RDI_CorbaULongHash, RDI_CorbaULongRank)
 {;}
 
 FAdminHelper::~FAdminHelper()
@@ -326,11 +326,16 @@
   CosNF::FilterID    fltrID;
   Filter_i*          fltr    = Filter_i::Filter2Filter_i(new_filter);
 
-  RDI_Assert(fltr, "Filter was not created by READY\n");
+  //RDI_Assert(fltr, "Filter was not created by READY\n");
 
   fltrID            = _serial++;
   entry.filter      = fltr;
-  entry.callback_id = fltr->attach_callback_i(held, filter_holder, need_schange);
+  if (fltr)
+     entry.callback_id = fltr->attach_callback_i(held, filter_holder, need_schange);
+  else
+     entry.remote_filter = CosNF::Filter::_duplicate(new_filter);
+     
+
   if ( _filters.insert(fltrID, entry) ) {
     RDIDbgFAdminLog("Failed to register new filter in hash table\n");
     return 0;
@@ -382,7 +387,11 @@
 
   if ( _filters.lookup(fltrID, entry) ) {
     RDIDbgFAdminLog("Get Filter " << entry.filter << " [" << fltrID << "]\n");
-    CosNF::Filter_var res = WRAPPED_IMPL2OREF(CosNF::Filter, entry.filter);
+    CosNF::Filter_var res;
+    if (entry.filter)
+       res = WRAPPED_IMPL2OREF(CosNF::Filter, entry.filter);
+    else
+       res = entry.remote_filter;
     return res;
   }
   throw CosNF::FilterNotFound();
@@ -418,10 +427,12 @@
     throw CosNF::FilterNotFound();
   }
   Filter_i *f = entry.filter;
-  f->fadmin_removal_i(held, entry.callback_id, filter_holder);
+  if (f)
+     f->fadmin_removal_i(held, entry.callback_id, filter_holder);
   RDIDbgFAdminLog("remove_filter: removing filter [" << fltrID << "] from hash table\n");
   _filters.remove(fltrID);
-  WRAPPED_RELEASE_IMPL(f);
+  if (f)
+     WRAPPED_RELEASE_IMPL(f);
 }
 
 #undef WHATFN
@@ -435,8 +446,11 @@
   for ( fcur = _filters.cursor(); fcur.is_valid(); fcur++ ) {
     FAdminFilterEntry &entry = fcur.val();
     // RDIDbgForceLog("XXX_REMOVE " << WHATFN << " calling fadmin_removal_i(held, entry.callback_id, filter_holder)");
-    entry.filter->fadmin_removal_i(held, entry.callback_id, filter_holder);
-    WRAPPED_RELEASE_IMPL(entry.filter);
+    if (entry.filter)
+    {
+       entry.filter->fadmin_removal_i(held, entry.callback_id, filter_holder);
+       WRAPPED_RELEASE_IMPL(entry.filter);
+    }
   }
   _filters.clear();
 }
@@ -453,7 +467,10 @@
   } else {
     for ( fcur = _filters.cursor(); fcur.is_valid(); fcur++ ) {
       FAdminFilterEntry &entry = fcur.val();
-      entry.filter->out_info_descr(str);
+      if (entry.filter)
+         entry.filter->out_info_descr(str);
+      else
+         str << "Remote Filter \n";
     }
   }
 }
diff -Naur omniNotify.orig//lib/Filter_i.cc omniNotify/lib/Filter_i.cc
--- omniNotify.orig//lib/Filter_i.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/Filter_i.cc	2005-06-23 20:04:54.000000000 +0200
@@ -75,7 +75,7 @@
 TW_Mutex         Filter_i::_classlock;
 CORBA::Long      Filter_i::_classctr = 0;
 RDIFilterKeyMap* Filter_i::_class_keymap = 
-  new RDIFilterKeyMap(RDI_SLongHash, RDI_SLongRank,128,20);
+  new RDIFilterKeyMap(RDI_CorbaSLongHash, RDI_CorbaSLongRank,128,20);
 
 #undef WHATFN
 #define WHATFN "Filter_i::Filter_i"
@@ -85,8 +85,8 @@
   _constraint_grammar(CORBA_STRING_DUP(grammar)), 
   _constraints(0), _constraint_impls(0),
   _callback_serial(1), _callback_i_serial(1),
-  _callbacks(RDI_ULongHash, RDI_ULongRank),
-  _callbacks_i(RDI_ULongHash, RDI_ULongRank),
+  _callbacks(RDI_CorbaULongHash, RDI_CorbaULongRank),
+  _callbacks_i(RDI_CorbaULongHash, RDI_CorbaULongRank),
   _flt_dom_ev_types(RDI_EventType::hash, RDI_EventType::rank),
   _flt_all_ev_types(RDI_EventType::hash, RDI_EventType::rank)
 {
@@ -119,7 +119,7 @@
       }
   } // end filter class lock scope
   char buf[20];
-  sprintf(buf, "filter%ld", _fid);
+  sprintf(buf, "filter%ld", (long)_fid);
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
 #ifndef NO_OBJ_GC
@@ -1231,7 +1231,7 @@
   { // introduce mappingfilter class lock scope
     TW_SCOPE_LOCK(class_lock, _classlock, "mappingfilter_class", WHATFN);
     _classctr++;
-    sprintf(buf, "mapfilter%ld", _classctr);
+    sprintf(buf, "mapfilter%ld", (long)_classctr);
   } // end mappingfilter class lock scope
   _my_name.length(_my_name.length()+1);
   _my_name[_my_name.length()-1] = (const char*)buf;
@@ -1465,7 +1465,7 @@
   unsigned int idx = 0;
   for ( cursor = _class_keymap->cursor(); cursor.is_valid(); ++cursor) {
     char buf[20];
-    sprintf(buf, "filter%ld", cursor.key());
+    sprintf(buf, "filter%ld", (long)cursor.key());
     (*names)[idx++] = (const char*)buf;
   }
   return names;
diff -Naur omniNotify.orig//lib/ProxyConsumer.cc omniNotify/lib/ProxyConsumer.cc
--- omniNotify.orig//lib/ProxyConsumer.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/ProxyConsumer.cc	2006-11-23 16:46:22.000000000 +0100
@@ -444,6 +444,13 @@
   return 1;
 }
 
+/*  since the _supplier is declared at the final level, we can't return it in this base class
+CORBA::Object* RDIProxyConsumer::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+*/
+
 // RDINotifSupplier methods:
 void
 RDIProxyConsumer::propagate_schange(RDI_LocksHeld&             held,
@@ -654,13 +661,22 @@
       filter = _fa_helper.get_filter((*filterseq)[ix]);
       rdfilter = Filter_i::Filter2Filter_i(filter);
       if (rdfilter) // XXX
-	RDIDbgCPxyLog("XXX RDIProxyConsumer::_match_event_proxy_level calling rdfilter->rdi_match\n");
+      {
+         if ( rdfilter->rdi_match(sevnt, _channel) )
+	 {
+	    RDIDbgCPxyLog("XXX RDIProxyConsumer::_match_event_proxy_level calling rdfilter->rdi_match\n");
+	    matched = 1;
+	    break;
+	 }
+      }
       else // XXX
-	RDIDbgCPxyLog("XXX RDIProxyConsumer::_match_event_proxy_level calling filter->match_structured\n");
-      if ( (rdfilter && rdfilter->rdi_match(sevnt, _channel)) ||
-	   (!rdfilter && filter->match_structured(*event)) ) {
-	matched = 1;
-	break;
+      {
+	  RDIDbgCPxyLog("XXX RDIProxyConsumer::_match_event_proxy_level calling filter->match_structured\n");
+	  if ( filter->match_structured(*event))  
+	  {
+	     matched = 1;
+	     break;
+	  }
       }
     }
     delete filterseq;
@@ -861,6 +877,11 @@
   }
 }
 
+CORBA::Object* ProxyPullConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
 #undef WHATFN
 #define WHATFN "ProxyPullConsumer_i::suspend_connection"
 void
@@ -1294,6 +1315,11 @@
   }
 }
 
+CORBA::Object* StructuredProxyPullConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
 #undef WHATFN
 #define WHATFN "StructuredProxyPullConsumer_i::suspend_connection"
 void
@@ -1750,6 +1776,11 @@
   }
 }
 
+CORBA::Object* SequenceProxyPullConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
 #undef WHATFN
 #define WHATFN "SequenceProxyPullConsumer_i::suspend_connection"
 void
@@ -2234,6 +2265,12 @@
   }
 }
 
+CORBA::Object* ProxyPushConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
+
 #undef WHATFN
 #define WHATFN "ProxyPushConsumer_i::disconnect_push_consumer"
 void
@@ -2376,6 +2413,11 @@
   }
 }
 
+CORBA::Object* StructuredProxyPushConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
 #undef WHATFN
 #define WHATFN "StructuredProxyPushConsumer_i::disconnect_structured_push_consumer"
 void
@@ -2520,6 +2562,11 @@
   }
 }
 
+CORBA::Object* SequenceProxyPushConsumer_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_supplier));
+}
+
 #undef WHATFN
 #define WHATFN "SequenceProxyPushConsumer_i::disconnect_sequence_push_consumer"
 void
diff -Naur omniNotify.orig//lib/ProxySupplier.cc omniNotify/lib/ProxySupplier.cc
--- omniNotify.orig//lib/ProxySupplier.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/ProxySupplier.cc	2006-11-23 16:46:22.000000000 +0100
@@ -701,6 +701,14 @@
   return 1;
 }
 
+/*  since the _consumer attributes are declared at the final class level, we can't return them in this base class
+CORBA::Object* RDIProxySupplier::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+*/
+
+
 // ------------------ ** Local-only routines **  --------------------------
 
 #ifndef NO_OBJ_GC
@@ -1011,6 +1019,11 @@
   _active  = 1;
 }
 
+CORBA::Object* ProxyPullSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
 #undef WHATFN
 #define WHATFN "ProxyPullSupplier_i::add_event"
 void
@@ -1242,6 +1255,11 @@
   _active  = 1;
 }
 
+CORBA::Object* StructuredProxyPullSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
 #undef WHATFN
 #define WHATFN "StructuredProxyPullSupplier_i::add_event"
 void
@@ -1564,6 +1582,12 @@
   _active  = 1;
 }
 
+CORBA::Object* SequenceProxyPullSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
+
 #undef WHATFN
 #define WHATFN "SequenceProxyPullSupplier_i::add_event"
 void
@@ -1736,6 +1760,12 @@
   }
 }
 
+CORBA::Object* ProxyPushSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
+
 #undef WHATFN
 #define WHATFN "ProxyPushSupplier_i::suspend_connection"
 void
@@ -2177,6 +2207,12 @@
   }
 }
 
+CORBA::Object* StructuredProxyPushSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
+
 #undef WHATFN
 #define WHATFN "StructuredProxyPushSupplier_i::suspend_connection"
 void
@@ -2590,6 +2626,12 @@
   }
 }
 
+CORBA::Object* SequenceProxyPushSupplier_i::remote_object()
+{
+   return(CORBA::Object::_duplicate(_consumer));
+}
+
+
 #undef WHATFN
 #define WHATFN "SequenceProxyPushSupplier_i::suspend_connection"
 void
diff -Naur omniNotify.orig//lib/RDIstrstream.cc omniNotify/lib/RDIstrstream.cc
--- omniNotify.orig//lib/RDIstrstream.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/RDIstrstream.cc	2005-06-23 20:04:56.000000000 +0200
@@ -196,6 +196,7 @@
 }
 
 #ifdef HAS_LongLong
+#if SIZEOF_LONG_LONG != SIZEOF_LONG
 RDIstrstream&
 RDIstrstream::operator<<(WRAPPED_CORBA_LONGLONG_TYPE n)
 {
@@ -216,6 +217,7 @@
   return *this;
 }
 #endif
+#endif
 
 #ifndef NO_FLOAT
 RDIstrstream&
diff -Naur omniNotify.orig//lib/RDITimeWrappers.cc omniNotify/lib/RDITimeWrappers.cc
--- omniNotify.orig//lib/RDITimeWrappers.cc	2003-10-23 06:39:12.000000000 +0200
+++ omniNotify/lib/RDITimeWrappers.cc	2005-06-23 20:04:56.000000000 +0200
@@ -146,7 +146,7 @@
 #undef WHATFN
 #define WHATFN "RDI_TimeT::fmt_local"
 const char *RDI_TimeT::fmt_local() {
-  CORBA::ULong ts, tm;
+  unsigned long ts, tm;
   get_posixbase_secs_msecs(ts, tm);
   time_t secs_as_time_t = ts;
   TW_SCOPE_LOCK(otime_lock, RDI_out_time_lock, "RDI_out_time", WHATFN);
diff -Naur omniNotify.orig//mk/beforeauto.mk.in omniNotify/mk/beforeauto.mk.in
--- omniNotify.orig//mk/beforeauto.mk.in	2003-10-29 20:18:36.000000000 +0100
+++ omniNotify/mk/beforeauto.mk.in	2005-06-23 20:04:56.000000000 +0200
@@ -943,20 +943,21 @@
 
 CMAKEDEPEND     += -D_AIX
 CXXMAKEDEPEND   += -D_AIX
+CXXLINKOPTIONS  += -brtl -bnoipath -blibpath:/usr/lib:$(prefix)/lib
 
 # the following definitions were provided by Tiga
-CXXOPTIONS      = -qstaticinline -qmaxmem=8192 -qlonglong -qlongdouble
-COPTIONS        = -qmaxmem=8192 -qlonglong -qlongdouble
+CXXOPTIONS      = -qstaticinline -qmaxmem=32768 -qlonglong -qlongdouble
+COPTIONS        = -qmaxmem=32768 -qlonglong -qlongdouble
 OMNITHREAD_POSIX_CPPFLAGS = -DNoNanoSleep -DPthreadDraftVersion=10
 OMNITHREAD_CPPFLAGS = -D_REENTRANT
 OMNITHREAD_LIB += -lpthread
 
 # this works only for xlc version >= 5
-SharedLibraryPlatformLinkFlagsTemplate = -G
+SharedLibraryPlatformLinkFlagsTemplate = -G -qmkshrobj \
+               -bnoipath -blibpath:/usr/lib:$(prefix)/lib
 
-# Please notice the last line. You can't use "-qmkshobj" instead of
-# "-G". Somehow, if you do that, a number of symbols are unresolved
-# when linking.
+# Please notice the last line. You need both -G and -qmkshrobj to get
+# true shared objects working properly.
 
 endif
 
